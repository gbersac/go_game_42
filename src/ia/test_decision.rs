use board::{GoBoard, Tile, Team};
use ia;
use ia::Decision;
use ia::heuristic::HeuristicFn;

// test which move is the best for the white team
fn test_one(s: &str, heur: HeuristicFn, nb_layers: u32, expected: Vec<(usize, usize)>) {
	let mut board = GoBoard::parse_with_size(&s.to_string());
	println!("Test\n{}", board);
	let (team_b, team_w) = Team::new_teams();
	let result =
			Decision::get_optimal_move(&mut board, &(team_b, team_w.clone()), team_w, nb_layers, heur);
	println!("result {:?}, expected {:?}\n", result.get_result(), expected);

	for exp in expected {
	    if exp == result.get_result() {
	    	return ;
	    }
	}
	panic!("Test decision failed");
}

// Does not work anymore because we don't update team captured.
fn heur_capture(board: &GoBoard, team: Team) -> i32 {
	team.captured() as i32
}

///test if the team captured is updated
#[test]
fn test_team_capture() {
	let s = r#"19
. . . . . . . . . . . . . . . . . . .
. W B B . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, heur_capture, 1, vec![(4, 1)]);
}

fn heur_tile_coords(board: &GoBoard, team: Team) -> i32 {
	let mut ttl = 0;
    for (x, line) in board.tiles.iter().enumerate() {
	    for (y, tile) in line.iter().enumerate() {
	        if tile.is_pawn() {
	        	ttl += (y * 19) + x;
	        }
	    }
    }
    ttl as i32
}

#[test]
fn test_decision() {
	let s = r#"19
W . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, heur_tile_coords, 2, vec![(1, 1)]);
	test_one(s, heur_tile_coords, 3, vec![(1, 1)]);
	test_one(s, heur_tile_coords, 4, vec![(1, 1)]);
}

#[test]
fn test_get_optimal_move() {
	let s = r#"19
W . . . . . . . . . . . . . . . . . .
. W . . . . . . . . . . . . . . . . .
. . W . . . . . . . . . . . . . . . .
. . . W . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(4, 4)]);

	let s = r#"19
W . . . . . . . . . . . . . . . . . .
. W . . . . . . . . . . . . . . . . .
. . W . . . . . . . . . . . . . . . .
. . . W . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . W . . . . . . . . . . . .
. . . . . . . W . . . . . . . . . . .
. . . . . . . . W . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(4, 4)]);

	let s = r#"19
W . . . . . . . . . . . . . . . . . .
. W . . . . . . . . . . . . . . . . .
. . W . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . W . . . . . . . . . . . .
. . . . . . . W . . . . . . . . . . .
. . . . . . . . W . . . . . . . . . .
. . . . . . . . . W . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(10, 11), (5, 6)]);

	let s = r#"19
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . B W . . . . . . . . . . .
. . . . . B W W . . . . . . . . . . .
. . . . . . W B . . . . . . . . . . .
. . . . B W W W B . . B . . . . . . .
. . . . W . B . W B . . . . . . . . .
. . . B . . . . . B W . . . . . . . .
. . . . . . . W . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(8, 3)]);

	let s = r#"19
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . W . . . . . . . . . . . .
. . . . . . . B . . . . . . . . . . .
. . . . . . W . B . . . . . . . . . .
. . . . . . . W . B . . . . . . . . .
. . . . . . . . W B B . . . . . . . .
. . . . . . . . . W . . . . . . . . .
. . . . . . . . . . B . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(5, 6)]);

	let s = r#"19
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . B . B . . . . . . . .
. . . . . . . W B W . . . B . . . . .
. . . . . . W . W . B . W B . . . . .
. . . . . . . W W W W B . . . . . . .
. . . . . . B . W . B . B . . . . . .
. . . . . . . W B B . W . W . . . . .
. . . . . . B . W . . . . . . . . . .
. . . . . . . . . W . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
	"#;
	test_one(s, ia::heuristic, 3, vec![(6, 7)]);

// 	let s = r#"19
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . W . . . . . . . .
// . . . . . . . . B W W W . . . . . . .
// . . . . . . . B W B . . . . . . . . .
// . . . . . . B W B . . . . . . . . . .
// . . . . . . B B . . . . . . . . . . .
// . . . . . . W . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// 	"#;
// 	test_one(s, ia::heuristic, 3, vec![(9, 7), (5, 11)]);

// 	let s = r#"19
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . W . . . . . . . . . .
// . . . . . . W . W . . . . . . . . . .
// . . . . . . . B W B B . . . . . . . .
// . . . . . . B . B W W W . . . . . . .
// . . . . . . . B W B . . . . . . . . .
// . . . . . . . W B . . . . . . . . . .
// . . . . . W B B . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . .
// 	"#;
// 	test_one(s, ia::heuristic, 3, vec![(5, 7), (9, 11)]);
}

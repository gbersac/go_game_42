var searchIndex = {};
searchIndex["gomoku"] = {"doc":"","items":[[5,"main","gomoku","",null,{"inputs":[],"output":null}],[0,"board","","",null,null],[3,"GoBoard","gomoku::board","",null,null],[12,"tiles","","The grid",0,null],[12,"size","","",0,null],[3,"Team","","",null,null],[12,"color","","",1,null],[12,"captured","","",1,null],[4,"Tile","","",null,null],[13,"BLACK","","",2,null],[13,"WHITE","","",2,null],[13,"FREE","","",2,null],[0,"tile","","",null,null],[4,"Tile","gomoku::board::tile","",null,null],[13,"BLACK","","",2,null],[13,"WHITE","","",2,null],[13,"FREE","","",2,null],[11,"clone","gomoku::board","",2,{"inputs":[{"name":"tile"}],"output":{"name":"tile"}}],[11,"eq","","",2,{"inputs":[{"name":"tile"},{"name":"tile"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"tile"},{"name":"tile"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"tile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[{"name":"tile"}],"output":{"name":"self"}}],[11,"from_str","","",2,{"inputs":[{"name":"tile"},{"name":"str"}],"output":{"name":"tile"}}],[11,"is_pawn","","",2,{"inputs":[{"name":"tile"}],"output":{"name":"bool"}}],[11,"ennemy","","Return the tile of the ennemy if there is one, return the tile itself\notherwise.",2,{"inputs":[{"name":"tile"}],"output":{"name":"tile"}}],[11,"fmt","","",2,{"inputs":[{"name":"tile"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"go_board","","",null,null],[3,"GoBoard","gomoku::board::go_board","",null,null],[12,"tiles","","The grid",0,null],[12,"size","","",0,null],[17,"GO_WIDTH","","",null,null],[17,"TILES_TO_WIN","","",null,null],[11,"clone","gomoku::board","",0,{"inputs":[{"name":"goboard"}],"output":{"name":"goboard"}}],[11,"eq","","",0,{"inputs":[{"name":"goboard"},{"name":"goboard"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"goboard"},{"name":"goboard"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"goboard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","The `get` function returns the tiles coordinates [x; y].",0,null],[11,"capture_dir","","",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"},{"name":"team"}],"output":null}],[11,"capture","","Test if playing this tile capture ennemy tiles and remove ennemy tiles\nand update number of captured tiles in the team if needed.",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"team"}],"output":null}],[11,"set_raw","","Assigns the value to tiles coordinates [x; y] without any check.",0,null],[11,"set","","The `set` function assigns the value to tiles coordinates [x; y]\nif possible. Return false otherwise.",0,null],[11,"unset","","The `unset` function assigns the FREE\nto tiles coordinates [x; y].",0,null],[11,"unset_gap","","",0,null],[11,"get_size","","The `get_size` function returns the size of\nthe grid side.",0,{"inputs":[{"name":"goboard"}],"output":{"name":"usize"}}],[11,"check_index","","The `check_index` function returns a boolean\nif the index is within the bounds of the board.",0,null],[11,"is_win_recursive","","",0,{"inputs":[{"name":"goboard"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"tile"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"is_win_direction","","Test if the tile at position [x, y] is winning on the direction\n[x - rightdir, y - downdir].",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"is_win","","Test if the tile at [x, y] is a winning one.",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"}],"output":{"name":"option"}}],[11,"is_exp","","Return true if the tile which is positionned at gap tiles from the\ntested tile on the direction defined by coords is of the expected type.",0,null],[11,"free_threes_dir","","Return the number of free threes in this direction.\nAssume that tile[x, y] is free.",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"i32"},{"name":"i32"},{"name":"team"}],"output":{"name":"u32"}}],[11,"free_threes","","Return true if the free threes rule allow this move.",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"team"}],"output":{"name":"bool"}}],[11,"is_allow","","Return true if it is allowed to add a tile on the position [x, y].\nx and y are supposed to be valid index",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"usize"},{"name":"team"}],"output":{"name":"bool"}}],[11,"is_empty","","",0,{"inputs":[{"name":"goboard"}],"output":{"name":"bool"}}],[11,"coord_out_of_index","","Return the (x, y) coordinates out of the index of the tile in the\nGoBoard::tiles array.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"goboard"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","The `new` constructor function returns the empty board.",0,{"inputs":[{"name":"goboard"}],"output":{"name":"self"}}],[0,"team","","",null,null],[3,"Team","gomoku::board::team","",null,null],[12,"color","","",1,null],[12,"captured","","",1,null],[11,"clone","gomoku::board","",1,{"inputs":[{"name":"team"}],"output":{"name":"team"}}],[11,"eq","","",1,{"inputs":[{"name":"team"},{"name":"team"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"team"},{"name":"team"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"team"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The `new` constructor function returns the Team.",1,{"inputs":[{"name":"team"},{"name":"tile"}],"output":{"name":"team"}}],[11,"new_teams","","Create all the teams of the game.",1,null],[11,"captured","","",1,{"inputs":[{"name":"team"}],"output":{"name":"u32"}}],[11,"get_tile","","",1,{"inputs":[{"name":"team"}],"output":{"name":"tile"}}],[11,"get_ennemy_tile","","",1,{"inputs":[{"name":"team"}],"output":{"name":"tile"}}],[11,"add_captured","","",1,{"inputs":[{"name":"team"},{"name":"u32"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"team"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","The `new` constructor function returns the interface team.",1,{"inputs":[{"name":"team"}],"output":{"name":"self"}}],[0,"parse","","",null,null],[11,"split_one_line","","",0,{"inputs":[{"name":"goboard"},{"name":"str"}],"output":{"name":"vec"}}],[11,"split_into_lines","","",0,{"inputs":[{"name":"goboard"},{"name":"string"}],"output":{"name":"vec"}}],[11,"execute_parse","","Parse a string which describe the inital state of the npuzzle board.",0,{"inputs":[{"name":"goboard"},{"name":"usize"},{"name":"vec"}],"output":{"name":"goboard"}}],[11,"parse_with_size","","This function also parse the size of the Board.\nThis function should only be used in test because there is no test.",0,{"inputs":[{"name":"goboard"},{"name":"string"}],"output":{"name":"goboard"}}],[0,"fn_str","","",null,null],[5,"atoi","gomoku::board::fn_str","Like the c function atoi, trim space and tabs at the beginning of the string\nand then parse to the T integer type the following number chars.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"display","gomoku","",null,null],[3,"Console","gomoku::display","",null,null],[12,"board","","",3,null],[12,"event","","",3,null],[12,"player","","",3,null],[12,"friend","","",3,null],[12,"layer","","",3,null],[12,"turn","","",3,null],[12,"win","","",3,null],[12,"help","","",3,null],[12,"help_decision","","",3,null],[12,"info","","",3,null],[12,"debug_map","","",3,null],[0,"console","","",null,null],[3,"Console","gomoku::display::console","",null,null],[12,"board","","",3,null],[12,"event","","",3,null],[12,"player","","",3,null],[12,"friend","","",3,null],[12,"layer","","",3,null],[12,"turn","","",3,null],[12,"win","","",3,null],[12,"help","","",3,null],[12,"help_decision","","",3,null],[12,"info","","",3,null],[12,"debug_map","","",3,null],[4,"Player","","",null,null],[13,"Human","","",4,null],[13,"Ia","","",4,null],[17,"CASE_WIDTH","","",null,null],[17,"ORANGE","","",null,null],[11,"clone","","",4,{"inputs":[{"name":"player"}],"output":{"name":"player"}}],[11,"eq","","",4,{"inputs":[{"name":"player"},{"name":"player"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"player"},{"name":"player"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"player"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"player"},{"name":"str"}],"output":{"name":"player"}}],[11,"clone","gomoku::display","",3,{"inputs":[{"name":"console"}],"output":{"name":"console"}}],[11,"fmt","","",3,{"inputs":[{"name":"console"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","The `new` constructor function returns the interface console.",3,null],[11,"get_size","","The `get_size` function returns window size.",3,{"inputs":[{"name":"console"}],"output":{"name":"size"}}],[11,"get_turn_is_ia","","The `get_turn_is_ia` function returns a boolean if a IA must play.",3,{"inputs":[{"name":"console"}],"output":{"name":"bool"}}],[11,"set","","The `set` function updates the turn and set the human coordinate.",3,null],[11,"set_raw","","The `set_raw` function updates the turn and set the IA coordinate.",3,null],[11,"is_ia_versus","","The `is_ia_versus` function returns a boolean if the player one\nand two are typed like IA.",3,{"inputs":[{"name":"console"}],"output":{"name":"bool"}}],[11,"play","","The `play` function sets the board with the new tail coordinate.",3,{"inputs":[{"name":"console"},{"name":"event"}],"output":{"name":"option"}}],[11,"help_optimal_move","","The `help_optimal_move` function returns the recommended coordinate to play.",3,null],[11,"input","","The `input` function listens all mouse event like resize and click.",3,{"inputs":[{"name":"console"},{"name":"event"},{"name":"u32"}],"output":null}],[11,"draw","","The `draw` function refreshs the window with a new board.",3,{"inputs":[{"name":"console"},{"name":"glgraphics"},{"name":"renderargs"},{"name":"u32"}],"output":null}],[11,"start","","The `start` function loops the board.",3,{"inputs":[{"name":"console"}],"output":null}],[11,"default","","The `new` constructor function returns the interface console.",3,{"inputs":[{"name":"console"}],"output":{"name":"self"}}],[0,"draw","","",null,null],[5,"draw_tile_color","gomoku::display::draw","The `draw_tile_color` function draws a tile according to a coordinate,\ndimension and color.",null,null],[5,"draw_border_color","","The `draw_border_color` function removes the border grid.",null,null],[5,"draw_line_color","","The `draw_line_color` function draws a cell line.",null,null],[5,"draw_render","","The `draw_render` function draws the grid!",null,null],[5,"draw_over","","The `draw_over` function draws the over tile.",null,null],[5,"draw_help","","The `draw_over` function draws the help tile.",null,null],[17,"BORDER_SIZE","","",null,null],[17,"ORANGE","","",null,null],[17,"BLACK","","",null,null],[17,"WHITE","","",null,null],[17,"OVER","","",null,null],[0,"mouse","gomoku::display","",null,null],[3,"Mouse","gomoku::display::mouse","",null,null],[12,"overed","","",5,null],[12,"coordinate_cell","","",5,null],[12,"dimension","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"mouse"}],"output":{"name":"mouse"}}],[11,"fmt","","",5,{"inputs":[{"name":"mouse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,null],[11,"set_dimension","","",5,null],[11,"get_dimension","","",5,null],[11,"set_coordinate","","",5,null],[11,"get_coordinate","","",5,null],[11,"set_over","","",5,{"inputs":[{"name":"mouse"},{"name":"bool"}],"output":null}],[11,"get_over","","",5,{"inputs":[{"name":"mouse"}],"output":{"name":"bool"}}],[11,"check_inside_window","","",5,null],[11,"default","","",5,{"inputs":[{"name":"mouse"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"mouse"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ia","gomoku","",null,null],[3,"Decision","gomoku::ia","",null,null],[12,"player","","",6,null],[12,"nb_layers","","",6,null],[12,"nb_node","","",6,null],[12,"nb_final","","",6,null],[12,"time_in_heuristic","","",6,null],[12,"total_time","","",6,null],[12,"result","","",6,null],[5,"heuristic","","",null,{"inputs":[{"name":"goboard"},{"name":"team"}],"output":{"name":"i32"}}],[5,"neg_infinite","","Return the opposite of the value. Special case for infinity.",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[0,"decision","","",null,null],[3,"Decision","gomoku::ia::decision","",null,null],[12,"player","","",6,null],[12,"nb_layers","","",6,null],[12,"nb_node","","",6,null],[12,"nb_final","","",6,null],[12,"time_in_heuristic","","",6,null],[12,"total_time","","",6,null],[12,"result","","",6,null],[17,"NB_THREAD","","",null,null],[11,"clone","gomoku::ia","",6,{"inputs":[{"name":"decision"}],"output":{"name":"decision"}}],[11,"eq","","",6,{"inputs":[{"name":"decision"},{"name":"decision"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decision"},{"name":"decision"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decision"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"playing_team","","",6,null],[11,"updated_team","","Return the tuple (team black, team white) with the new team",6,null],[11,"splitted_moves_to_evaluate","","",6,{"inputs":[{"name":"decision"},{"name":"goboard"}],"output":{"name":"vec"}}],[11,"compute_one_move","","launch the recursive for one of the move to evaluate",6,null],[11,"recursive","","albet: alpha &lt; beta\n[algo explication](https://en.wikipedia.org/wiki/Negamax)",6,null],[11,"one_thread","","albet: alpha &lt; beta\n[algo explication](https://en.wikipedia.org/wiki/Negamax)",6,null],[11,"launch_threads","","",6,null],[11,"print_result","","",6,{"inputs":[{"name":"decision"}],"output":null}],[11,"get_optimal_move","","Return the coordinates of the move which is considered to maximise the\nodds of victory for the team.",6,null],[11,"get_result","","",6,null],[0,"heuristic","","",null,null],[5,"check_index","gomoku::ia::heuristic","",null,{"inputs":[{"name":"goboard"},{"name":"i32"},{"name":"i32"}],"output":{"name":"bool"}}],[5,"nb_in_line","","dx and dy must equal 1 or -1",null,{"inputs":[{"name":"goboard"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"tile"}],"output":{"name":"i32"}}],[5,"tile_value","","",null,{"inputs":[{"name":"goboard"},{"name":"i32"},{"name":"i32"},{"name":"tile"}],"output":{"name":"i32"}}],[5,"heuristic","","",null,{"inputs":[{"name":"goboard"},{"name":"team"}],"output":{"name":"i32"}}],[6,"HeuristicFn","","",null,null],[17,"WIN","","",null,null],[0,"turn","gomoku::ia","",null,null],[4,"Turn","gomoku::ia::turn","",null,null],[13,"Player","","Player is looking to maximise the value of the heuristic",7,null],[13,"Adversary","","Adversary is looking to minimise the value of the heuristic",7,null],[6,"SortFn","","",null,null],[11,"clone","","",7,{"inputs":[{"name":"turn"}],"output":{"name":"turn"}}],[11,"eq","","",7,{"inputs":[{"name":"turn"},{"name":"turn"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"turn"},{"name":"turn"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"turn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"other","","",7,{"inputs":[{"name":"turn"}],"output":{"name":"turn"}}],[11,"sign_alternation","","",7,{"inputs":[{"name":"turn"}],"output":{"name":"i32"}}],[0,"move_to_evaluate","gomoku::ia","",null,null],[5,"test_pawn","gomoku::ia::move_to_evaluate","",null,null],[5,"get_neighbors","","",null,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"vec"}}],[5,"move_to_evaluate","","",null,{"inputs":[{"name":"goboard"}],"output":{"name":"vec"}}],[17,"INFINITE","gomoku::ia","",null,null],[17,"NINFINITE","","",null,null],[0,"cmd_option","gomoku","",null,null],[3,"CmdOption","gomoku::cmd_option","",null,null],[12,"player","","",8,null],[12,"friend","","",8,null],[12,"layers","","",8,null],[12,"human_help","","",8,null],[12,"info","","",8,null],[12,"debug_map","","",8,null],[12,"init_map","","",8,null],[5,"file_as_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[17,"DEFAULT_PLAYER","","",null,null],[17,"DEFAULT_FRIEND","","",null,null],[17,"DEFAULT_LAYERS","","",null,null],[17,"DEFAULT_INFO","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"cmdoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",8,{"inputs":[{"name":"cmdoption"},{"name":"argmatches"}],"output":{"name":"cmdoption"}}]],"paths":[[3,"GoBoard"],[3,"Team"],[4,"Tile"],[3,"Console"],[4,"Player"],[3,"Mouse"],[3,"Decision"],[4,"Turn"],[3,"CmdOption"]]};
initSearch(searchIndex);
